{
  "hash": "42b5a28b855809923f3347dd4e496423",
  "result": {
    "markdown": "---\ntitle: \"\"\nformat: html\n---\n\n\n# Projetos e Diretórios\n\nCriar um projeto no RStudio para análise de dados oferece diversas vantagens, como melhor organização e gerenciamento de arquivos, ambiente de trabalho isolado e reprodutível, e integração com sistemas de controle de versão como Git. Facilita a colaboração e partilha de projetos, permitindo que todas as dependências e estrutura de diretórios sejam consistentes. A automatização de tarefas através de scripts, a facilidade de navegação e a manutenção de um diretório de trabalho consistente melhoram a eficiência. Além disso, as configurações específicas do projeto são salvas e podem ser facilmente restauradas, proporcionando um ambiente de análise de dados organizado e eficaz.\n\nPara criar um projeto no RStudio, abra o programa e clique em Project: (None) no canto superior direito, selecionando `New Project...` Escolha `New Directory` para criar um projeto em um novo diretório ou `Existing Directory` para usar uma pasta existente. Para a maioria dos casos, selecione New Project, insira o nome do diretório e escolha o local onde o diretório será criado. Clique em `Create Project` e o RStudio configurará e abrirá automaticamente o novo projeto, permitindo que você adicione arquivos e scripts conforme necessário para sua análise de dados.\n\n# O que um **Quarto Document**?\n\nUm Quarto document é um documento dinâmico criado com Quarto, uma plataforma que facilita a criação de documentos, apresentações e sites a partir de código R, Python e outras linguagens de programação. Quarto é uma evolução do RMarkdown, projetada para ser mais extensível e suportar múltiplas linguagens.\n\nNas análises realizadas aqui utilizaremos quarto documents. Nossos scripts terão a estensão **'qmd'**.\n\nPara criar um novo Documento Quarto vá até o menu `File >` `New File >` `Quarto Document....`, selecione o tipo de documento que deseja criar (por exemplo, HTML, PDF, Word) e clique em OK.\n\n# Mais uma ferramenta importante, o Chunk!\n\nUm chunk (ou \"bloco de código\") é uma seção de um documento Quarto que contém código a ser executado. Chunks são delimitados por marcadores especiais que indicam onde o código começa e termina. Eles são usados para inserir e executar código dentro de documentos dinâmicos, permitindo a integração de análise de dados e texto explicativo em um único documento.\n\n## Estrutura de um Chunk\n\nBom, para resumir...\n\nIsso: '**```{r ...}**'; inicia um chunk de código R.\n\nE isso: '**```**'; termina o chunk.\n\nVocê pode criar um chunk utilizando o atalho de teclado `Ctrl + Alt + I` (Windows/Linux) ou `Cmd + Option + I` (Mac) para inserir um chunk de código. Para executar o código dentro desse chunk, com o mesmo selecionado, pressione `Ctrl + Enter`. Para deixar comentários dentro do chunk adicone **#** antes da frase.\n\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-1_41977e9c25da3bbbb71e0872021dbb6a'}\n\n```{.r .cell-code}\n# Este é um exemplo de chunk\n\n# Você pode executar diversos códigos e obter respostas:\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n# Operações Básicas\n\nAgora que você já conhece os arquivos Quarto Document, vamos iniciar com operações básicas. Vale lembrar que os comandos devem ser executados dentro dos chunks.\n\n## Aprendendo a atribuir valores\n\nVocê pode criar objetos atribuindo valores à eles. Os valores adiconados irão aparecer na aba `Enviroment`.\n\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-2_00d68bd97e4c79b3e6d22dfd77b27822'}\n\n```{.r .cell-code}\nA <- 1\nB <- 2\nC <- 3\n\n# Para vizualizar o valor do objeto selecione-o e execute o código.\n\nC\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nVocê pode ir além seguindo os próximos chunks:\n\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-3_e20a2d09748a1002365ad0650c823297'}\n\n```{.r .cell-code}\n# Criando objetos com mais de um valor; utilizando 'c' para combinação.\n\nD <- c(2, 4, 6, 8, 10)\n\n# Criando objetos com um outro tipo de dado.\n\nS <- c(\"une\", \"dune\", \"tê\", \"salamê\", \"minguê\")\n\n# Agora, é só vizualizar:\n\nD\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n:::\n\n\n## Fazendo operações\n\nVocê pode fazer operações com números e também com os objetos criados que assumem os valores atribuidos \n\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-4_f48f1808e8d7ad2bb215bab1f2a4d215'}\n\n```{.r .cell-code}\nA + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## Criando um dataframe\n\nUm dataframe é uma estrutura de dados bidimensional, semelhante a uma tabela, amplamente utilizada na linguagem R. Ele  permite armazenar e manipular diferentes tipos de dados tabulares de forma eficiente.\n\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-5_e4cc2d75d16ba27dd6297e9dadb2b511'}\n\n```{.r .cell-code}\ndf <- data.frame(A, B) # Exemplo de dataframe simples\n```\n:::\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-6_0df831a647ff430d549c509b5e685a66'}\n\n```{.r .cell-code}\n# Exemplo de dataframe mais complexo\n\ndataf <- data.frame(palavras = S, números = D)\n\n\ndataf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  palavras números\n1      une       2\n2     dune       4\n3       tê       6\n4   salamê       8\n5   minguê      10\n```\n:::\n:::\n\n\n## Como pedir ajuda\n\nVocê percebeu que utilizou um comando chamado `data.frame` para criar o seu dataframe, certo? Pois bem, este comando é uma função base do software R. Ao longo das nossas aulas vamos nos deparar com diversas funções diferentes.\n\nFicou com dúvida sobre o uso de alguma função? Tem uma função que pode te ajudar! Basta digitar `help()`, entre parênteses você digita o nome da função sobre a qual você tem duvida. Veja o exemplo:\n\n\n::: {.cell hash='Aula_1_cache/html/unnamed-chunk-7_fcf9f3a1e362ef14d6060b16ba42d779'}\n\n```{.r .cell-code}\nhelp(data.frame)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n\n```{.r .cell-code}\n# Isso faz com que apareça informações sobre a função na aba de ajuda \"help\".\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}