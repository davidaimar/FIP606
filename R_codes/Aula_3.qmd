---
title: " "
format: html
---
# Apredendo a importar dados

A análise de dados tem como pré-requisito básico, obviamente, a existência dos dados a serem analisados. Idependente do procedimento de coleta de dados os dados podem ser organizados em arquivos digitais de diversos formatos. Aqui você aprenderá como trazer os seus dados para o seu projeto no Rstudio. 

Pacotes necessários
```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(ggthemes)

```

Você pode usar `{warning=FALSE, message=FALSE}` no cabeçalho do chunk para ocultar alertas e mensagens de carregamento.

## Dados em formato CSV

Para importar dados no formato CSV você pode usar a função `read.csv()`.
```{r warning=FALSE, message=FALSE}
cr <- read_csv("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")

```

## Arquivos Excel

Para importar dados de um arquivo Excel, você pode usar o pacote **readxl**.
```{r warning=FALSE, message=FALSE}
library(readxl)

dados <- read_excel("dados-diversos.xlsx", sheet = "magnesio") 

# Onde: 'read_excel("caminho/para/arquivo.xlsx", sheet = "nome_da_planilha")'

```

Para facilitar a importação nesse caso, você pode deixar seu arquivo Excel dentro do diretório do seu projeto. Fazendo isso, você consegue encontrá-lo com apenas o nome do arquivo.

# Analisando a estrutura dos dados

Agora que já importamos os nossos dados, vamos dar início a análise. Aqui optaremos por trabalhar com o primeiro conjunto de dados importado, o que atribuímos ao objeto chamado **'cr'** que é uma abreviação de "Coffee Rust". Este é um amplo conjunto de dados que trás informações sobre a incidência e severidade da ferrugem do cafeeiro em diversas regiões dos EUA, separando por modo de cultivo, genótipo das cultivares e forma de manejo, podendo ser explorado de diversas maneiras.

Através da a função `glimpse()` do pacote **dplyr** obtemos um um resumo compacto e informativo dos dados como o número de linha e colunas, por exemplo.
```{r warning=FALSE, message=FALSE}
glimpse(cr)

```

Podemos fazer modificações como sumarizando informação para uma variável específica, nesse caso a variável "incidência".
```{r warning=FALSE, message=FALSE}
summary(cr$inc)

```
## Elaboração de gráficos

Entendo o conteúdo dos nossos dados, podemos criar gráficos através do `ggplot()` para facilitar a vizualização

Gráficos do tipo **histograma** avaliando a incidência geral e por região:
```{r warning=FALSE, message=FALSE}
cr |>
  ggplot(aes(x = inc)) +
  geom_histogram()

# Podemos obsevar a frequência de incidência de maneira geral

```

```{r warning=FALSE, message=FALSE}
cr |>
  ggplot(aes(x = inc)) +
  geom_histogram() +
  facet_wrap(~region)

# Separando para as duas regiões destacadas

```
#Fazendo boxplot para as mesma variável

```{r warning=FALSE, message=FALSE}

cr |> 
  ggplot(aes(x = inc)) +
  geom_boxplot()

cr |> 
  ggplot(aes(x = inc)) +
  geom_boxplot() +
  facet_wrap(~region)

#Duas variáveis: propriedade e incidência
cr |>
  ggplot(aes(x = farm, inc)) +
  geom_boxplot()

```

```{r}
#Gráficos para severidade
cr |> 
  ggplot(aes(inc, sev2))+
  geom_point()

cr |> 
  ggplot(aes(x = sev2)) +
  geom_histogram() +
  facet_wrap(~region)
```

```{r}
#Medidas de tendência central para severidade
cr |> 
  group_by(cultivar) |> 
  summarize(inc_med = median(sev2),
            inc_mean = mean(sev2),
            sd_mean = sd(sev2))
```

```{r}
#Medidas de tendência central para severidade
cr |> 
  group_by(cultivar) |> 
  summarize(inc_med = median(sev2),
            inc_mean = mean(sev2),
            sd_mean = sd(sev2))
```

```{r}
#Histogramas para a severidade por região e cultivar 
cr |> 
  ggplot(aes(x = sev2, fill = region)) +
  geom_histogram() +
  facet_wrap(~region~cultivar, ncol = 6)+
  theme_classic(base_size = 12)+
  scale_fill_colorblind()

```

```{r}
#Gráfico histograma com cores

#Gráfico1
cr |> 
  ggplot(aes(x = sev2, fill = region))+
  geom_histogram()+
  facet_grid(region~cultivar)+
  scale_fill_colorblind()

#Gráfico2
cr |> 
  ggplot(aes(x = sev2, fill = region))+
  geom_histogram(color = 'black')+
  facet_grid(region~cultivar)+
  scale_fill_manual(values = c("red", "blue")) +
  theme_minimal(base_size = 12)+
  theme(legend.position = "bottom")+
  labs(y = "Frequency",
       x = "Severity (%)", fill = "Region")

```

#Salvar o último gráfico

```{r}
ggsave("cr.png", bg = 'white')
```

## Modificando dados

A partir do conjunto de dados inicial podemos selecionar informações úteis para, juntamente com os gráficos, facilitar o entendimento dos mesmos.

Por exemplo, para calcular medidas de tendência central (media, mediana e desvio padrão) da variável incidência podemos utilizar:
```{r warning=FALSE, message=FALSE}
cr |> 
  group_by(cultivar) |> 
  summarize(inc_med = median(inc),
            inc_mean = mean(inc),
            sd_mean = sd(inc))

```

Atribuindo este código a um objeto, você cria um novo conjunto de dados com os valores expostos.

### Criando subconjuntos

Utilizando as funções `select()` e `filter()` do pacote **dplyr** para selecionar colunas e linhas respectivamente podemos criar subconjuntos do nosso conjunto de dados.

Filtrando as informações para a região "Oromia":
```{r warning=FALSE, message=FALSE}
cr_oromia <- cr |>
  select(farm, region, cultivar, sev2) |> 
  filter( region == "Oromia")

cr_oromia

```

Fazendo a mesma coisa para a região "SNNPR"
```{r warning=FALSE, message=FALSE}
cr_pr <- cr |>
  select(farm, region, cultivar, sev2) |> 
  filter( region == "SNNPR")

cr_pr

```

Agora, podemos criar gráficos com os dados de cada subconjunto

Vamos ver a severidade nos cultivares da região Oromia:
```{r warning=FALSE, message=FALSE}
p1 <- cr_oromia |> 
  ggplot(aes(x = cultivar, y = sev2, fill = cultivar)) +
  geom_boxplot()+
  labs(title = "Oromia",
        x = "Cultivar",
       y = "Severity (%)")+
  theme_classic()

p1

```

Agora, na região SNNPR:
```{r warning=FALSE, message=FALSE}
p2 <- cr_pr |> 
  ggplot(aes(x = cultivar, y = sev2, fill = cultivar)) +
  geom_boxplot()+
  labs(title = "SNNPR",
       x = "Cultivar",
       y = "Severity (%)")+
  theme_classic()

p2

```
## Combinando gráficos

Utilizando o pacote **pacthwork** é possível unir os gráficos criados de maneiras diferentes.

Combinando os dois gráficos:
```{r warning=FALSE, message=FALSE}
library(patchwork)
p1 + p2 

```

Você também pode combinar gráficos com diferentes sinais, por exemplo: "gráfico1 + gráfico2", "(gráfico1 | gráfico2)" e "(gráfico1 / gráfico2)".

Combinando dois gráficos, mantendo apenas uma legenda:
```{r warning=FALSE, message=FALSE}
(p1 | p2) +
  plot_layout(guides = 'collect')

```
Removendo os títulos dos gráficos e usando letras para indicá-los:
```{r warning=FALSE, message=FALSE}
# Criar o primeiro gráfico
 p3 <- cr_oromia |> 
  ggplot(aes(x = cultivar, y = sev2,
             fill = cultivar)) +
  geom_boxplot()+
  labs(x = "Cultivar",
       y = "Severity (%)")+
  theme_classic()

p3 

```

```{r warning=FALSE, message=FALSE}
# Cria o segundo gráfico
p4 <- cr_pr |> 
  ggplot(aes(x = cultivar, y = sev2,
             fill = cultivar)) +
  geom_boxplot()+
  labs(x = "Cultivar",
       y = "Severity (%)")+
  theme_classic()

p4 

```

```{r}
# Por fim, combine os dois gráficos
(p3 | p4) +
  plot_layout(guides = 'collect')+
  plot_annotation(tag_levels = 'A')

```
Ainda é possível rotacionar os nossos gráficos, mudando as coordenadas com o `coord_flip()`:
```{r warning=FALSE, message=FALSE}
p5 <- cr_oromia |> 
  ggplot(aes(x = cultivar, y = sev2, fill = cultivar)) +
  geom_boxplot()+
  labs(x = "", #removendo o nome do eixo x por questão de estética
       y = "Severity (%)")+
  theme_classic()+
  scale_fill_canva()+
  coord_flip()

p5

```

```{r warning=FALSE, message=FALSE}
p6 <- cr_pr |> 
  ggplot(aes(x = cultivar, y = sev2, fill = cultivar)) +
  geom_boxplot()+
  labs(x = "",
       y = "Severity (%)")+
  theme_classic()+
 scale_fill_canva()+
  coord_flip()

p6

```

```{r warning=FALSE, message=FALSE}
#Combinando os dois gráficos mais uma vez
 pacht <- (p5 / p6) +
  plot_layout(guides = 'collect', axis_titles = 'collect')+
  plot_annotation(tag_levels = 'A', title = "Coffe rust in Ethiopia") #Colocando o título no gráfico e separando as regiões em A e B
 
 pacht

```
Utilize a função `ggsave()` para salvar o gráfico criado:
```{r warning=FALSE, message=FALSE}
ggsave("patch.png", width = 10, height = 8)

```

Você ainda pode inserir um tipo de gráfico diferente em um outro:
```{r warning=FALSE, message=FALSE}
# Criando um gráfico histograma
p7 <- cr_oromia |> 
  ggplot(aes(x = sev2, fill = cultivar)) +
  geom_histogram()+
  labs(title = "Oromia",
        x = "Cultivar",
       y = "Severity (%)")+
  theme_classic()+
  scale_fill_canva()
p7

```

```{r}
# Inserindo no gráfico boxplot
p5 + inset_element(p7, left = 0.6, bottom = 0.6, right = 1, top = 1) + plot_layout(guides = 'collect')

```

Lembre-se de organizar o espaço ocupado pelos seus gráficos para não acabar ocultando informações.
